{"version":3,"file":"static/js/990.4eb2de6c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.module.css","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\"};","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const handleInput = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'number':\n        setNumber(event.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const addNewContact = ({ name, number }) => {\n    const newContact = {\n      name,\n      number,\n      id: nanoid(),\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contacts!`);\n    }\n    return dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addNewContact({ name, number });\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.contactForm}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleInput}\n        />\n      </label>\n\n      <label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleInput}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"bthListItem\":\"ContactItem_bthListItem__6Sj9U\"};","import { useDispatch } from 'react-redux';\nimport css from './ContactItem.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\n\n\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const deleteContactId = () => dispatch(deleteContact(id));\n  return (\n    <>\n      <li key={id} className={css.contactItem}>\n        <p>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={css.bthListItem}\n          onClick={deleteContactId}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n","import css from './ContactList.module.css';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const searchContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <ul className={css.contactList}>\n        {searchContacts.map(({ name, number, id }) => {\n          return (\n            <ContactItem key={nanoid()} name={name} number={number} id={id} />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"title\":\"Section_title__SLHvV\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section className={css.section}>\n      <h2 className={css.title}>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/filter/filterSlace';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const changeFilter = event => {\n    return dispatch(filterContact(event.target.value));\n  };\n\n  return (\n    <label>\n      <input\n        type=\"text\"\n        placeholder=\"Find contacts by name\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </label>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getIsLoading, getError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <div>\n        <Section title=\"Phonebook\">\n          <ContactForm />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <Filter />\n          {isLoading && !error && <Loader />}\n          <ContactList />\n        </Section>\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInput","event","target","value","onSubmit","preventDefault","newContact","id","nanoid","find","contact","toLowerCase","alert","addContact","addNewContact","className","css","type","placeholder","pattern","title","required","onChange","ContactItem","onClick","deleteContact","ContactList","searchContacts","includes","map","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Section","children","Filter","filterContact","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}